import numpy as np, numpy.random
import random
import os
import torch
from sklearn.metrics.pairwise import cosine_similarity
from collections import Counter

def gen_data(trainloader, testloader, number):
    "This function generate data with new labels."
    "New labels are generated by adding a new number which selected uniformly at random from [number]."

    examples = enumerate(trainloader)

    train_data = []
    train_label = []
    while True:
        try:
            batch_idx, (example_data, example_targets) = next(examples)
            label = example_targets.numpy().tolist()
            k = np.random.randint(number)
            label.append(k)
            train_label.append(label)
            train_data.append(example_data.squeeze(0).numpy())
        except:
            break

    instances = enumerate(testloader)

    test_data = []
    test_label = []
    while True:
        try:
            batch_index, (instances_data, instances_targets) = next(instances)
            origin_label = instances_targets.numpy().tolist()
            k = np.random.randint(number)
            origin_label.append(k)
            test_label.append(origin_label)
            test_data.append(instances_data.squeeze(0).numpy())
        except:
            break

    return train_data, train_label, test_data, test_label

def gen_matrix(newlabel, label2index):
    "This function get distribution of new labels."
    "The input are list of all labels and dictionary of label and index."
    "It returns a matrix of shape ba (where a is the number of classes in the original dataset and b is the number of new classes we're creating;"
    
    counter = Counter()
    counter_first = Counter()

    for label in newlabel:

        counter[tuple(label)] += 1
        counter_first[label[0]] += 1
    row_num = len(counter)
    col_num = len(counter_first)

    output = np.zeros([row_num, col_num])

    for label, number in counter.items():

        label_first = label[0]
        label_index = label2index[label]
        
        output[label_index, label_first] = float(number)/float(counter_first[label_first])

    return output


def gen_sim(m):
    "This function generate similarity matrix."
    "Every row of input matrix m represent every new label."

    b, a = m.shape
    new = []
    for i in range(b):
        new.append(m[i,:])
    cosine_dist = cosine_similarity(new)
    sim_matrix = torch.from_numpy(cosine_dist)

    return sim_matrix

